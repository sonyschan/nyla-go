/**
 * NYLA Internationalization (i18n) System
 * Multi-language support for Extension and PWA
 */

class NYLAi18n {
  constructor() {
    this.currentLanguage = this.detectLanguage();
    this.fallbackLanguage = 'en';
    this.translations = {};
    this.observers = [];
    
    // Supported languages
    this.supportedLanguages = {
      'en': { name: 'English', nativeName: 'English' },
      'zh': { name: 'Chinese', nativeName: '‰∏≠Êñá' },
      'zh-CN': { name: 'Chinese Simplified', nativeName: 'ÁÆÄ‰Ωì‰∏≠Êñá' },
      'zh-TW': { name: 'Chinese Traditional', nativeName: 'ÁπÅÈ´î‰∏≠Êñá' }
    };
    
    console.log(`üåê i18n: Initialized with language: ${this.currentLanguage}`);
  }

  /**
   * Detect user's preferred language
   */
  detectLanguage() {
    // 1. Check localStorage preference
    const savedLang = localStorage.getItem('nylago-language');
    if (savedLang && this.isLanguageSupported(savedLang)) {
      return savedLang;
    }
    
    // 2. Check browser language
    const browserLang = navigator.language || navigator.userLanguage;
    if (this.isLanguageSupported(browserLang)) {
      return browserLang;
    }
    
    // 3. Check browser language without region (e.g., 'zh' from 'zh-CN')
    const langCode = browserLang?.split('-')[0];
    if (this.isLanguageSupported(langCode)) {
      return langCode;
    }
    
    // 4. Default to English
    return 'en';
  }

  /**
   * Check if language is supported
   */
  isLanguageSupported(langCode) {
    return this.supportedLanguages.hasOwnProperty(langCode);
  }

  /**
   * Load translations for a language
   */
  async loadTranslations(langCode) {
    if (this.translations[langCode]) {
      return this.translations[langCode];
    }

    try {
      // Try to load from static file
      const response = await fetch(`./i18n/${langCode}.json`);
      if (response.ok) {
        this.translations[langCode] = await response.json();
        console.log(`‚úÖ i18n: Loaded translations for ${langCode}`);
        return this.translations[langCode];
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è i18n: Failed to load ${langCode}.json:`, error);
    }

    // Fallback to inline translations if file loading fails
    this.translations[langCode] = this.getInlineTranslations(langCode);
    return this.translations[langCode];
  }

  /**
   * Get inline translations (fallback)
   */
  getInlineTranslations(langCode) {
    const translations = {
      'zh': {
        // Tab Navigation
        'tab.nyla': 'NYLA',
        'tab.send': 'ÂèëÈÄÅ',
        'tab.receive': 'Êé•Êî∂',
        'tab.swap': '‰∫§Êç¢',
        
        // Common UI
        'ui.amount': 'ÈáëÈ¢ù',
        'ui.token': '‰ª£Â∏Å',
        'ui.blockchain': 'Âå∫ÂùóÈìæ',
        'ui.username': 'Áî®Êà∑Âêç',
        'ui.recipient': 'Êî∂Ê¨æ‰∫∫',
        'ui.generate': 'ÁîüÊàê',
        'ui.share': 'ÂàÜ‰∫´',
        'ui.send': 'ÂèëÈÄÅ',
        'ui.cancel': 'ÂèñÊ∂à',
        'ui.close': 'ÂÖ≥Èó≠',
        'ui.loading': 'Âä†ËΩΩ‰∏≠...',
        
        // Header
        'header.tagline': 'ÊÇ®ÁöÑÊîØ‰ªòÂíåÁ§æÂå∫AI‰ª£ÁêÜ',
        
        // Send Tab
        'send.title': 'üí∏ ÂèëÈÄÅ‰ªòÊ¨æ',
        'send.recipient.label': 'Êî∂Ê¨æ‰∫∫XÁî®Êà∑Âêç',
        'send.recipient.placeholder': '@Áî®Êà∑Âêç',
        'send.amount.label': 'ÈáëÈ¢ùÂíå‰ª£Â∏Å',
        'send.button': 'üí∏ ÂèëÈÄÅÂà∞X.com',
        'send.preview': 'ÂëΩ‰ª§È¢ÑËßà',
        'send.preview.placeholder': 'Â°´ÂÜô‰∏äÈù¢ÁöÑÂ≠óÊÆµ‰ª•Êü•ÁúãËΩ¨Ë¥¶ÂëΩ‰ª§',
        
        // Receive Tab  
        'receive.title': 'üí∞ Êé•Êî∂‰ªòÊ¨æ',
        'receive.username.label': 'ÊÇ®ÁöÑXÁî®Êà∑Âêç',
        'receive.qr.instruction': 'üì± ÂàÜ‰∫´Ê≠§‰∫åÁª¥Á†ÅÊé•Êî∂ {token} ‰ªòÊ¨æ',
        'receive.qr.hint': 'ÂÖ∂‰ªñ‰∫∫ÂèØ‰ª•Êâ´ÊèèÂπ∂Á´ãÂç≥ÂêëÊÇ®‰ªòÊ¨æ',
        'receive.button': 'üì§ ÂàÜ‰∫´‰ªòÊ¨æËØ∑Ê±Ç',
        
        // Swap Tab
        'swap.title': 'üîÑ ‰ª£Â∏Å‰∫§Êç¢',
        'swap.from.label': 'ÈáëÈ¢ùÂíåÊ∫ê‰ª£Â∏Å',
        'swap.to.label': 'ÁõÆÊ†á‰ª£Â∏Å',
        'swap.button': 'üîÑ ÂèëÈÄÅÂà∞X.com',
        'swap.preview.placeholder': 'Âú®‰∏äÈù¢ÈÄâÊã©‰∏çÂêåÁöÑ‰ª£Â∏Å‰ª•Êü•Áúã‰∫§Êç¢ÂëΩ‰ª§',
        
        // Blockchain Names
        'blockchain.solana': 'Solana',
        'blockchain.ethereum': '‰ª•Â§™Âùä',  
        'blockchain.algorand': 'Algorand',
        
        // NYLA AI Assistant
        'nyla.title': '‚ù§Ô∏è NYLA AIÂä©Êâã (ÂÆûÈ™åÊÄß)',
        'nyla.loading': 'NYLAÊ≠£Âú®ÂêØÂä®...',
        'nyla.placeholder': 'ËØ¢ÈóÆÂÖ≥‰∫éNYLAËΩ¨Ë¥¶„ÄÅQRÁ†ÅÊàñÂå∫ÂùóÈìæÁöÑÈóÆÈ¢ò...',
        'nyla.send': 'ÂèëÈÄÅ',
        
        // Errors
        'error.network': 'ÁΩëÁªúÈîôËØØÔºåËØ∑ÈáçËØï',
        'error.invalid.username': 'Êó†ÊïàÁöÑÁî®Êà∑ÂêçÊ†ºÂºè',
        'error.invalid.amount': 'ËØ∑ËæìÂÖ•ÊúâÊïàÈáëÈ¢ù',
        'error.qr.generation': '‰∫åÁª¥Á†ÅÁîüÊàêÂ§±Ë¥•',
        
        // Footer
        'footer.version': 'NYLA Go v{version}',
        'footer.feedback': 'ÂèçÈ¶à',
        'footer.donate': 'ÊçêËµ†'
      },
      
      'zh-CN': {
        // Inherit from 'zh' and override specific terms
        ...this.getInlineTranslations('zh'),
        'blockchain.ethereum': '‰ª•Â§™Âùä',
        'nyla.title': '‚ù§Ô∏è NYLA AIÂä©ÁêÜ (ËØïÈ™åÁâà)'
      },
      
      'zh-TW': {
        // Traditional Chinese variants
        'tab.nyla': 'NYLA',
        'tab.send': 'ÂÇ≥ÈÄÅ',
        'tab.receive': 'Êé•Êî∂',
        'tab.swap': '‰∫§Êèõ',
        
        'ui.amount': 'ÈáëÈ°ç',
        'ui.token': '‰ª£Âπ£',
        'ui.blockchain': 'ÂçÄÂ°äÈèà',
        'header.tagline': 'ÊÇ®ÁöÑÊîØ‰ªòÂíåÁ§æÁæ§AI‰ª£ÁêÜ',
        
        'send.title': 'üí∏ ÂÇ≥ÈÄÅ‰ªòÊ¨æ',
        'send.recipient.label': 'Êî∂Ê¨æ‰∫∫XÁî®Êà∂Âêç',
        'send.button': 'üí∏ ÂÇ≥ÈÄÅÂà∞X.com',
        
        'receive.title': 'üí∞ Êé•Êî∂‰ªòÊ¨æ', 
        'receive.username.label': 'ÊÇ®ÁöÑXÁî®Êà∂Âêç',
        'receive.qr.instruction': 'üì± ÂàÜ‰∫´Ê≠§QRÁ¢ºÊé•Êî∂ {token} ‰ªòÊ¨æ',
        'receive.button': 'üì§ ÂàÜ‰∫´‰ªòÊ¨æË´ãÊ±Ç',
        
        'swap.title': 'üîÑ ‰ª£Âπ£‰∫§Êèõ',
        'blockchain.ethereum': '‰ª•Â§™Âùä',
        'nyla.title': '‚ù§Ô∏è NYLA AIÂä©ÁêÜ (ÂØ¶È©óÊÄß)',
        'nyla.loading': 'NYLAÊ≠£Âú®ÂïüÂãï...'
      }
    };

    return translations[langCode] || {};
  }

  /**
   * Get translated text
   */
  t(key, params = {}) {
    const translation = this.getTranslation(key);
    
    // Replace parameters in translation
    return this.interpolate(translation, params);
  }

  /**
   * Get translation for a key
   */
  getTranslation(key) {
    // Try current language
    if (this.translations[this.currentLanguage]?.[key]) {
      return this.translations[this.currentLanguage][key];
    }
    
    // Try fallback language
    if (this.translations[this.fallbackLanguage]?.[key]) {
      return this.translations[this.fallbackLanguage][key];
    }
    
    // Return key if no translation found
    console.warn(`‚ö†Ô∏è i18n: Missing translation for key: ${key}`);
    return key;
  }

  /**
   * Interpolate parameters into translation string
   */
  interpolate(text, params) {
    return text.replace(/\{(\w+)\}/g, (match, key) => {
      return params.hasOwnProperty(key) ? params[key] : match;
    });
  }

  /**
   * Change language
   */
  async setLanguage(langCode) {
    if (!this.isLanguageSupported(langCode)) {
      console.warn(`‚ö†Ô∏è i18n: Unsupported language: ${langCode}`);
      return false;
    }

    this.currentLanguage = langCode;
    localStorage.setItem('nylago-language', langCode);
    
    // Load translations
    await this.loadTranslations(langCode);
    
    // Update HTML lang attribute
    document.documentElement.lang = langCode;
    
    // Notify observers
    this.notifyLanguageChange(langCode);
    
    console.log(`üåê i18n: Language changed to ${langCode}`);
    return true;
  }

  /**
   * Add language change observer
   */
  addLanguageObserver(callback) {
    this.observers.push(callback);
  }

  /**
   * Notify language change observers
   */
  notifyLanguageChange(langCode) {
    this.observers.forEach(callback => {
      try {
        callback(langCode);
      } catch (error) {
        console.error('‚ö†Ô∏è i18n: Language observer error:', error);
      }
    });
  }

  /**
   * Initialize i18n system
   */
  async initialize() {
    // Load translations for current language
    await this.loadTranslations(this.currentLanguage);
    
    // Load fallback language if different
    if (this.currentLanguage !== this.fallbackLanguage) {
      await this.loadTranslations(this.fallbackLanguage);
    }
    
    // Set HTML lang attribute
    document.documentElement.lang = this.currentLanguage;
    
    console.log(`‚úÖ i18n: Initialized with ${this.currentLanguage}`);
    return this;
  }

  /**
   * Get current language info
   */
  getCurrentLanguageInfo() {
    return {
      code: this.currentLanguage,
      ...this.supportedLanguages[this.currentLanguage]
    };
  }

  /**
   * Get all supported languages
   */
  getSupportedLanguages() {
    return this.supportedLanguages;
  }
}

// Export for use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = NYLAi18n;
}
window.NYLAi18n = NYLAi18n;